export namespace BaseUtils {
  function UniqueIndex(): any;
}
export namespace ColorUtils {
  function detectColorsFromDraftState(draftState: any): any;
  function detectColorsFromHTMLString(html: any): any;
  function getHexColor(color: any): any;
  const namedColors: {
    aliceblue: string;
    antiquewhite: string;
    aqua: string;
    aquamarine: string;
    azure: string;
    beige: string;
    bisque: string;
    black: string;
    blanchedalmond: string;
    blue: string;
    blueviolet: string;
    brown: string;
    burlywood: string;
    cadetblue: string;
    chartreuse: string;
    chocolate: string;
    coral: string;
    cornflowerblue: string;
    cornsilk: string;
    crimson: string;
    cyan: string;
    darkblue: string;
    darkcyan: string;
    darkgoldenrod: string;
    darkgray: string;
    darkgreen: string;
    darkkhaki: string;
    darkmagenta: string;
    darkolivegreen: string;
    darkorange: string;
    darkorchid: string;
    darkred: string;
    darksalmon: string;
    darkseagreen: string;
    darkslateblue: string;
    darkslategray: string;
    darkturquoise: string;
    darkviolet: string;
    deeppink: string;
    deepskyblue: string;
    dimgray: string;
    dodgerblue: string;
    firebrick: string;
    floralwhite: string;
    forestgreen: string;
    fuchsia: string;
    gainsboro: string;
    ghostwhite: string;
    gold: string;
    goldenrod: string;
    gray: string;
    green: string;
    greenyellow: string;
    honeydew: string;
    hotpink: string;
    "indianred ": string;
    indigo: string;
    ivory: string;
    khaki: string;
    lavender: string;
    lavenderblush: string;
    lawngreen: string;
    lemonchiffon: string;
    lightblue: string;
    lightcoral: string;
    lightcyan: string;
    lightgoldenrodyellow: string;
    lightgreen: string;
    lightgrey: string;
    lightpink: string;
    lightsalmon: string;
    lightseagreen: string;
    lightskyblue: string;
    lightslategray: string;
    lightsteelblue: string;
    lightyellow: string;
    lime: string;
    limegreen: string;
    linen: string;
    magenta: string;
    maroon: string;
    mediumaquamarine: string;
    mediumblue: string;
    mediumorchid: string;
    mediumpurple: string;
    mediumseagreen: string;
    mediumslateblue: string;
    mediumspringgreen: string;
    mediumturquoise: string;
    mediumvioletred: string;
    midnightblue: string;
    mintcream: string;
    mistyrose: string;
    moccasin: string;
    navajowhite: string;
    navy: string;
    oldlace: string;
    olive: string;
    olivedrab: string;
    orange: string;
    orangered: string;
    orchid: string;
    palegoldenrod: string;
    palegreen: string;
    paleturquoise: string;
    palevioletred: string;
    papayawhip: string;
    peachpuff: string;
    peru: string;
    pink: string;
    plum: string;
    powderblue: string;
    purple: string;
    rebeccapurple: string;
    red: string;
    rosybrown: string;
    royalblue: string;
    saddlebrown: string;
    salmon: string;
    sandybrown: string;
    seagreen: string;
    seashell: string;
    sienna: string;
    silver: string;
    skyblue: string;
    slateblue: string;
    slategray: string;
    snow: string;
    springgreen: string;
    steelblue: string;
    tan: string;
    teal: string;
    thistle: string;
    tomato: string;
    turquoise: string;
    violet: string;
    wheat: string;
    white: string;
    whitesmoke: string;
    yellow: string;
    yellowgreen: string;
  };
}
export namespace ContentUtils {
  function clear(editorState: any): any;
  function createEditorState(contentState: any, editorDecorators: any): any;
  function createEmptyEditorState(editorDecorators: any): any;
  function decreaseSelectionIndent(editorState: any): any;
  function getSelectedBlocks(editorState: any): any;
  function getSelectionBlock(editorState: any): any;
  function getSelectionBlockData(editorState: any, name: any): any;
  function getSelectionBlockType(editorState: any): any;
  function getSelectionEntityData(editorState: any, type: any): any;
  function getSelectionEntityType(editorState: any): any;
  function getSelectionInlineStyle(editorState: any): any;
  function getSelectionText(editorState: any): any;
  function handleKeyCommand(editorState: any, command: any): any;
  function increaseSelectionIndent(editorState: any, ...args: any[]): any;
  function insertAtomicBlock(editorState: any, type: any, ...args: any[]): any;
  function insertHTML(editorState: any, htmlString: any, source: any): any;
  function insertHorizontalLine(editorState: any): any;
  function insertMedias(editorState: any, ...args: any[]): any;
  function insertText(editorState: any, text: any, inlineStyle: any, entity: any): any;
  function isEditorState(editorState: any): any;
  function isSelectionCollapsed(editorState: any): any;
  function redo(editorState: any): any;
  function registerStrictBlockType(blockType: any): void;
  function removeBlock(editorState: any, block: any, ...args: any[]): any;
  function removeMedia(editorState: any, mediaBlock: any): any;
  function removeSelectionInlineStyles(editorState: any): any;
  function selectBlock(editorState: any, block: any): any;
  function selectNextBlock(editorState: any, block: any): any;
  function selectionContainsBlockType(editorState: any, blockType: any): any;
  function selectionContainsStrictBlock(editorState: any): any;
  function selectionHasInlineStyle(editorState: any, style: any): any;
  function setMediaData(editorState: any, entityKey: any, data: any): any;
  function setMediaPosition(editorState: any, mediaBlock: any, position: any): any;
  function setSelectionBlockData(editorState: any, blockData: any, override: any): any;
  function toggleSelectionAlignment(editorState: any, alignment: any): any;
  function toggleSelectionBackgroundColor(editorState: any, color: any): any;
  function toggleSelectionBlockType(editorState: any, blockType: any): any;
  function toggleSelectionColor(editorState: any, color: any): any;
  function toggleSelectionEntity(editorState: any, entity: any): any;
  function toggleSelectionFontFamily(editorState: any, fontFamily: any): any;
  function toggleSelectionFontSize(editorState: any, fontSize: any): any;
  function toggleSelectionIndent(editorState: any, textIndent: any, ...args: any[]): any;
  function toggleSelectionInlineStyle(editorState: any, style: any, ...args: any[]): any;
  function toggleSelectionLetterSpacing(editorState: any, letterSpacing: any): any;
  function toggleSelectionLineHeight(editorState: any, lineHeight: any): any;
  function toggleSelectionLink(editorState: any, href: any, target: any): any;
  function undo(editorState: any): any;
  function updateEachCharacterOfSelection(editorState: any, callback: any): any;
}
